#include <iostream>
#include <queue>
using namespace std;

// Definición de la estructura del nodo del árbol
struct Nodo {
    int dato;
    Nodo* izquierda;
    Nodo* derecha;

    Nodo(int valor) : dato(valor), izquierda(NULL), derecha(NULL) {}
};

// Función para insertar un nodo en el árbol
Nodo* insertar(Nodo* raiz, int valor) {
    if (raiz == NULL) {
        return new Nodo(valor);
    }

    if (valor < raiz->dato) {
        raiz->izquierda = insertar(raiz->izquierda, valor);
    } else {
        raiz->derecha = insertar(raiz->derecha, valor);
    }

    return raiz;
}

// Recorrido de anchura (BFS)
void recorridoAnchura(Nodo* raiz) {
    if (raiz == NULL) {
        return;
    }

    queue<Nodo*> cola;
    cola.push(raiz);

    while (!cola.empty()) {
        Nodo* nodoActual = cola.front();
        cola.pop();

        cout << nodoActual->dato << " ";

        if (nodoActual->izquierda != NULL) {
            cola.push(nodoActual->izquierda);
        }

        if (nodoActual->derecha != NULL) {
            cola.push(nodoActual->derecha);
        }
    }

    cout << endl;
}

// Recorrido inorden (izquierda, raíz, derecha)
void recorridoInorden(Nodo* raiz) {
    if (raiz == NULL) {
        return;
    }

    recorridoInorden(raiz->izquierda);
    cout << raiz->dato << " ";
    recorridoInorden(raiz->derecha);
}

// Recorrido preorden (raíz, izquierda, derecha)
void recorridoPreorden(Nodo* raiz) {
    if (raiz == NULL) {
        return;
    }

    cout << raiz->dato << " ";
    recorridoPreorden(raiz->izquierda);
    recorridoPreorden(raiz->derecha);
}

// Recorrido postorden (izquierda, derecha, raíz)
void recorridoPostorden(Nodo* raiz) {
    if (raiz == NULL) {
        return;
    }

    recorridoPostorden(raiz->izquierda);
    recorridoPostorden(raiz->derecha);
    cout << raiz->dato << " ";
}
void liberarMemoria(Nodo* raiz) {
    if (raiz == NULL) {
        return;
    }

    liberarMemoria(raiz->izquierda);
    liberarMemoria(raiz->derecha);

    delete raiz;
}
int main() {
    Nodo* raiz = NULL;
    char opcion_menu_inicial, opcion;
    int valor;

    do {
        cout << "\nMENU INICIAL\n";
        cout << "1. Insertar nodo en el arbol\n";
        cout << "2. Recorridos del arbol\n";
        cout << "3. Salir\n";
        cout << "Seleccione una opcion: ";
        cin >> opcion_menu_inicial;

        switch (opcion_menu_inicial) {
            case '1':
                cout << "Ingrese el valor del nodo a insertar: ";
                cin >> valor;
                raiz = insertar(raiz, valor);
                break;
            case '2':
                cout << "\nRecorridos del arbol:\n";
                cout << "a. Recorrido de anchura (BFS)\n";
                cout << "b. Recorrido inorden\n";
                cout << "c. Recorrido preorden\n";
                cout << "d. Recorrido postorden\n";
                cout << "Seleccione una opcion: ";
                cin >> opcion;

                switch (opcion) {
                    case '1':
                        cout << "Recorrido de anchura (BFS): ";
                        recorridoAnchura(raiz);
                        break;
                    case '2':
                        cout << "Recorrido inorden: ";
                        recorridoInorden(raiz);
                        cout << endl;
                        break;
                    case '3':
                        cout << "Recorrido preorden: ";
                        recorridoPreorden(raiz);
                        cout << endl;
                        break;
                    case '4':
                        cout << "Recorrido postorden: ";
                        recorridoPostorden(raiz);
                        cout << endl;
                        break;
                    default:
                        cout << "Opcion invalida. Por favor seleccione una opcion valida.\n";
                }
                break;
            case '3':
                cout << "Saliendo del programa.\n";
                break;
            default:
                cout << "Opcion invalida. Por favor seleccione una opcion valida.\n";
        }
    } while (opcion_menu_inicial != '3');

   liberarMemoria(raiz);

    return 0;
}
