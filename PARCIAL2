#include <iostream>
using namespace std;

struct Nodo {
    int dato;
    int prioridad;
    Nodo* siguiente;
};

struct Nodocol {
    int dato;
    int prioridad;
    Nodocol* siguiente;
};

struct TreeNode {
    int data;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int val) : data(val), left(NULL), right(NULL) {}
};

void insert(TreeNode*& root, int val) {
    if (root == NULL) {
        root = new TreeNode(val);
    } else {
        if (val < root->data) {
            insert(root->left, val);
        } else {
            insert(root->right, val);
        }
    }
}

void printInOrder(TreeNode* root) {
    if (root == NULL) {
        return;
    }
    printInOrder(root->left);
    cout << root->data << " ";
    printInOrder(root->right);
}

void mostrarArbol(TreeNode* root) {
    if (root == NULL) {
        cout << "El arbol esta vacio.\n";
        return;
    }
    cout << "El arbol ordenado es: ";
    printInOrder(root);
    cout << endl;
}

void agregarProceso(Nodo*& pila, int dato, int prioridad) {
    if (prioridad < 1 || prioridad > 3) {
        cout << "Error: La prioridad debe ser 1, 2 o 3.\n";
        return;
    }
    Nodo* nuevo_nodo = new Nodo();
    nuevo_nodo->dato = dato;
    nuevo_nodo->prioridad = prioridad;

    if (pila == NULL) {
        nuevo_nodo->siguiente = nuevo_nodo; // Lista circular
        pila = nuevo_nodo;
    } else {
        nuevo_nodo->siguiente = pila->siguiente;
        pila->siguiente = nuevo_nodo;
        pila = nuevo_nodo;
    }
    cout << "Proceso agregado correctamente.\n";
}


void atenderProceso(Nodo*& pila) {
    if (pila == NULL) {
        cout << "No hay procesos en espera en la pila.\n";
        return;
    }

    Nodo* aux = pila;
    Nodo* temp = pila;
    while (temp->siguiente != pila) {
        temp = temp->siguiente;
    }
    temp->siguiente = pila->siguiente;
    pila = pila->siguiente;
    cout << "Atendiendo proceso: " << aux->dato << " de prioridad " << aux->prioridad << endl;
    delete aux;

    cout << "Numeros restantes en la pila:\n";
    Nodo* temp2 = pila;
    while (temp2->siguiente != pila) {
        cout << temp2->dato << " - Prioridad: " << temp2->prioridad << endl;
        temp2 = temp2->siguiente;
    }
    cout << temp2->dato << " - Prioridad: " << temp2->prioridad << endl;
    cout << endl;
}

void imprimirProcesos(Nodo* pila) {
	
	if (pila == NULL) {
        cout << "No hay procesos en espera en la pila.\n";
        return;
    }
    Nodo* aux = pila;
    do {
        cout << aux->dato << " - Prioridad: " << aux->prioridad << endl;
        aux = aux->siguiente;
    } while (aux != pila);
    cout << endl;
}


void agregarProcesocol(Nodocol*& cola, int dato, int prioridad) {
    if (prioridad < 1 || prioridad > 3) {
        cout << "Error: La prioridad debe ser 1, 2 o 3.\n";
        return;
    }
    Nodocol* nuevo_nodo = new Nodocol();
    nuevo_nodo->dato = dato;
    nuevo_nodo->prioridad = prioridad;

    if (cola == NULL) {
        nuevo_nodo->siguiente = nuevo_nodo; // Lista circular
        cola = nuevo_nodo;
    } else {
        nuevo_nodo->siguiente = cola->siguiente;
        cola->siguiente = nuevo_nodo;
        cola = nuevo_nodo;
    }
    cout << "Proceso agregado correctamente.\n";
}

void atenderProcesocol(Nodocol*& cola) {
    if (cola == NULL) {
        cout << "No hay procesos en espera en la cola.\n";
        return;
    }

    Nodocol* aux = cola;
    Nodocol* temp = cola;
    while (temp->siguiente != cola) {
        temp = temp->siguiente;
    }
    temp->siguiente = cola->siguiente;
    cola = cola->siguiente;
    cout << "Atendiendo proceso: " << aux->dato << " de prioridad " << aux->prioridad << endl;
    delete aux;

    cout << "Numeros restantes en la cola:\n";
    Nodocol* temp2 = cola;
    while (temp2->siguiente != cola) {
        cout << temp2->dato << " - Prioridad: " << temp2->prioridad << endl;
        temp2 = temp2->siguiente;
    }
    cout << temp2->dato << " - Prioridad: " << temp2->prioridad << endl;
    cout << endl;
}

void imprimirProcesoscol(Nodocol* cola) {
    if (cola == NULL) {
        cout << "No hay procesos en espera en la cola.\n";
        return;
    }

    Nodocol* temp = cola;
    cout << "Procesos en la cola:\n";
    do {
        cout << temp->dato << " - Prioridad: " << temp->prioridad << endl;
        temp = temp->siguiente;
    } while (temp != cola);
    cout << endl;
}

int main() {
    system("color fD");
    TreeNode* root = NULL;
    Nodo* cola = NULL;
    Nodo* pila = NULL;
    Nodocol* colacol = NULL;
    Nodocol* pilacol = NULL;
    int dato, prioridad;
    char opcion, opcion_menu_inicial;

    do {
        cout << "\nMENU INICIAL\n";
        cout << "1. Ingresar datos a cola\n";
        cout << "2. Ingresar datos a pila\n";
        cout << "3. Salir\n";
        cout << "Seleccione una opcion: ";
        cin >> opcion_menu_inicial;

        switch (opcion_menu_inicial) {
            case '1':
                do {
                    cout << "\nMENU COLA\n";
                    cout << "1. Agregar proceso\n";
                    cout << "2. Atender procesos\n";
                    cout << "3. Ver datos ingresados como arbol\n";
                    cout << "4. Ver datos ingresados como lista circular\n";
                    cout << "5. Volver al menu inicial\n";
                    cout << "Seleccione una opcion: ";
                    cin >> opcion;

                    switch (opcion) {
                        case '1':
                            cout << "Ingrese el numero del proceso: ";
                            cin >> dato;
                            cout << "Ingrese la prioridad del proceso (1, 2, o 3): ";
                            cin >> prioridad;
                            agregarProcesocol(colacol, dato, prioridad);
                            insert(root, dato);
                            break;
                        case '2':
                            atenderProcesocol(colacol);
                            break;
                        case '3':
                            mostrarArbol(root);
                            break;
                        case '4':
                            imprimirProcesoscol(colacol);
                            break;
                        case '5':
                            cout << "Volviendo al menu inicial.\n";
                            break;
                        default:
                            cout << "Opcion invalida. Por favor seleccione una opcion valida.\n";
                    }
                } while (opcion != '5');
                break;
            case '2':
                do {
                    cout << "\nMENU PILA\n";
                    cout << "1. Agregar proceso\n";
                    cout << "2. Atender procesos\n";
                    cout << "3. Ver datos ingresados como arbol\n";
                    cout << "4. Ver datos ingresados como lista circular\n";
                    cout << "5. Volver al menu inicial\n";
                    cout << "Seleccione una opcion: ";
                    cin >> opcion;

                    switch (opcion) {
                        case '1':
                            cout << "Ingrese el numero del proceso: ";
                            cin >> dato;
                            cout << "Ingrese la prioridad del proceso (1, 2, o 3): ";
                            cin >> prioridad;
                            agregarProceso(pila, dato, prioridad);
                            insert(root, dato);
                            break;
                        case '2':
                            atenderProceso(pila);
                            break;
                        case '3':
                            mostrarArbol(root);
                            break;
                        case '4':
                             imprimirProcesos(pila);
                            break;
                        case '5':
                            cout << "Volviendo al menu inicial.\n";
                            break;
                        default:
                            cout << "Opcion invalida. Por favor seleccione una opcion valida.\n";
                    }
                } while (opcion != '5');
                break;
           
            case '3':
                cout << "Saliendo del programa.\n";
                break;
            default:
                cout << "Opcion invalida. Por favor seleccione una opcion valida.\n";
        }
    } while (opcion_menu_inicial != '3');

    while (cola != NULL) {
        Nodo* aux = cola;
        cola = cola->siguiente;
        delete aux;
    }
    while (pila != NULL) {
        Nodo* aux = pila;
        pila = pila->siguiente;
        delete aux;
    }
    while (colacol != NULL) {
        Nodocol* aux = colacol;
        colacol = colacol->siguiente;
        delete aux;
    }
    while (pilacol != NULL) {
        Nodocol* aux = pilacol;
        pilacol = pilacol->siguiente;
        delete aux;
    }

    return 0;
}
