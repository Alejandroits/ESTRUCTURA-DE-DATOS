#include <iostream>
#include <list>
using namespace std;

class Grafo {
    int V; // Número de vértices
    list<int> *listaAdy; // Puntero a un array que contiene las listas de adyacencia

public:
    Grafo(int V); // Constructor
    void agregarArista(int v, int w); // Función para agregar una arista al grafo
    void DFSUtil(int v, bool visitado[]); // Función recursiva utilizada por DFS
    void DFS(int v); // Función DFS que recorre el grafo
};

Grafo::Grafo(int V) {
    this->V = V;
    listaAdy = new list<int>[V];
}

void Grafo::agregarArista(int v, int w) {
    listaAdy[v].push_back(w); // Agrega w a la lista de v
}

void Grafo::DFSUtil(int v, bool visitado[]) {
    // Marca el vértice actual como visitado y lo imprime
    visitado[v] = true;
    cout << v << " ";

    // Recorre todos los vértices adyacentes a este vértice
    for(auto it = listaAdy[v].begin(); it != listaAdy[v].end(); ++it) {
        if(!visitado[*it])
            DFSUtil(*it, visitado);
    }
}

void Grafo::DFS(int v) {
    
    bool *visitado = new bool[V];
    for(int i = 0; i < V; i++)
        visitado[i] = false;

   
    DFSUtil(v, visitado);
}

int main() {
    Grafo g(4);
    g.agregarArista(0, 1);
    g.agregarArista(0, 2);
    g.agregarArista(1, 2);
    g.agregarArista(2, 0);
    g.agregarArista(2, 3);
    g.agregarArista(3, 3);

    cout << "Recorrido DFS iniciando desde el vértice 2: ";
    g.DFS(2);
    cout << endl;

    return 0;
}
